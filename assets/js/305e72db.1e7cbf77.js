"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[904],{5110:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(9703);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?i.createElement(g,a(a({ref:t},c),{},{components:n})):i.createElement(g,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4688:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var i=n(7086),r=(n(9703),n(5110));const o={sidebar_position:2},a="Migrating Run Scripts",s={unversionedId:"guides/upgrade_to_1/run_scripts",id:"guides/upgrade_to_1/run_scripts",isDocsHomePage:!1,title:"Migrating Run Scripts",description:'Prior to Mephisto 1.0, our run scripts relied directly on Hydra semantics to settle in to launch things. This led to some unclear import ordering (not including "self" at times), boilerplate on registering the configs, and other issues.',source:"@site/docs/guides/upgrade_to_1/run_scripts.md",sourceDirName:"guides/upgrade_to_1",slug:"/guides/upgrade_to_1/run_scripts",permalink:"/docs/guides/upgrade_to_1/run_scripts",editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/guides/upgrade_to_1/run_scripts.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"guides",previous:{title:"Upgrade Guide",permalink:"/docs/guides/upgrade_to_1/guide"}},p=[{value:"Upgrading <code>@hydra.main</code> to <code>@task_script</code>",id:"upgrading-hydramain-to-task_script",children:[{value:"main signature",id:"main-signature",children:[],level:3},{value:"Picking <code>@task_script</code> args",id:"picking-task_script-args",children:[{value:"Simple Case (no custom script args)",id:"simple-case-no-custom-script-args",children:[],level:4},{value:"Complex Case (some custom script args)",id:"complex-case-some-custom-script-args",children:[],level:4}],level:3}],level:2},{value:"Updating  main script contents",id:"updating--main-script-contents",children:[{value:"Processing your config, or initializing a MephistoDB or Operator",id:"processing-your-config-or-initializing-a-mephistodb-or-operator",children:[],level:3},{value:"Launching a run from your operator",id:"launching-a-run-from-your-operator",children:[],level:3}],level:2}],l={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"migrating-run-scripts"},"Migrating Run Scripts"),(0,r.kt)("p",null,"Prior to Mephisto 1.0, our run scripts relied directly on Hydra semantics to settle in to launch things. This led to some unclear import ordering (not including ",(0,r.kt)("inlineCode",{parentName:"p"},'"_self_"')," at times), boilerplate on registering the configs, and other issues."),(0,r.kt)("p",null,"This guide seeks to provide all of the steps to upgrade your run scripts to work properly."),(0,r.kt)("p",null,"In 1.0 we've released a new decorator (",(0,r.kt)("inlineCode",{parentName:"p"},"task_script"),") as well as some additional hydra configuration improvements (",(0,r.kt)("inlineCode",{parentName:"p"},"build_default_task_config"),"). We've also deprecated use of ",(0,r.kt)("inlineCode",{parentName:"p"},"operator.validate_and_run_config")," in favor of ",(0,r.kt)("inlineCode",{parentName:"p"},"operator.launch_task_run"),". To get you upgraded you'll need to change your ",(0,r.kt)("inlineCode",{parentName:"p"},"@hydra.main")," and this operator call. Here's how:"),(0,r.kt)("h2",{id:"upgrading-hydramain-to-task_script"},"Upgrading ",(0,r.kt)("inlineCode",{parentName:"h2"},"@hydra.main")," to ",(0,r.kt)("inlineCode",{parentName:"h2"},"@task_script")),(0,r.kt)("p",null,"The biggest part of this migration is moving to use ",(0,r.kt)("inlineCode",{parentName:"p"},"@task_script"),", which is a decorator that abstracts away most of the process of dealing with Hydra. Regardless of the args you use, you'll first need to update your main signature."),(0,r.kt)("h3",{id:"main-signature"},"main signature"),(0,r.kt)("p",null,"The old main signature expected just a ",(0,r.kt)("inlineCode",{parentName:"p"},"DictConfig"),", while the new one expects both an ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"DictConfig"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# before\nimport hydra\n...\n@hydra.main(config_path="hydra_configs", config_name="scriptconfig")\ndef main(cfg: DictConfig) -> None:\n\n# after\nfrom mephisto.tools.scripts import task_script\n...\n@task_script(...)\ndef main(operator: Operator, cfg: DictConfig) -> None:\n')),(0,r.kt)("h3",{id:"picking-task_script-args"},"Picking ",(0,r.kt)("inlineCode",{parentName:"h3"},"@task_script")," args"),(0,r.kt)("p",null,"Now, you'll actually need to fill in arguments for the ",(0,r.kt)("inlineCode",{parentName:"p"},"@task_script")," decorator. If the only custom arguments you were using in your ",(0,r.kt)("inlineCode",{parentName:"p"},"RunScriptConfig")," were ",(0,r.kt)("inlineCode",{parentName:"p"},"defaults"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"task_dir"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"num_tasks")," you're in luck as these are all included in the new ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskConfig"),"! You'll follow the simple migration. If you did create your own arguments, you're still in luck as the new syntax is still much cleaner than the old one! You can follow the complex case."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," if you were using a ",(0,r.kt)("inlineCode",{parentName:"p"},"config_path")," other than ",(0,r.kt)("inlineCode",{parentName:"p"},"hydra_configs")," in the folder your run script was in, you'll have to pass that ",(0,r.kt)("inlineCode",{parentName:"p"},"config_path")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"@task_script")," now instead."),(0,r.kt)("h4",{id:"simple-case-no-custom-script-args"},"Simple Case (no custom script args)"),(0,r.kt)("p",null,"Almost all of the hydra initialization can just be boiled down to the name of the ",(0,r.kt)("inlineCode",{parentName:"p"},"conf")," file you intend to use (minus the ",(0,r.kt)("inlineCode",{parentName:"p"},".yaml"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# before\nimport hydra\nfrom dataclasses import dataclass, field\nfrom typing import List, Any\n\nTASK_DIRECTORY = os.path.dirname(os.path.abspath(__file__))\ndefaults = ["_self_", {"conf": "example"}]\n\nfrom mephisto.operations.hydra_config import RunScriptConfig, register_script_config\n\n@dataclass\nclass TestScriptConfig(RunScriptConfig):\n    defaults: List[Any] = field(default_factory=lambda: defaults)\n    task_dir: str = TASK_DIRECTORY\n    num_tasks: int = 5\n\nregister_script_config(name="scriptconfig", module=TestScriptConfig)\n\n@hydra.main(config_path="hydra_configs", config_name="scriptconfig")\ndef main(cfg: DictConfig) -> None:\n\n\n# after\n\nfrom mephisto.operations.operator import Operator\nfrom omegaconf import DictConfig\nfrom mephisto.tools.scripts import task_script\n\n@task_script(default_config_file="example")\ndef main(operator: Operator, cfg: DictConfig) -> None:\n')),(0,r.kt)("p",null,"And that's it! Just move the name present in ",(0,r.kt)("inlineCode",{parentName:"p"},'{"conf": "this_right_here"}')," to the arg you pass in as ",(0,r.kt)("inlineCode",{parentName:"p"},"default_config_file")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"@task_script"),"."),(0,r.kt)("h4",{id:"complex-case-some-custom-script-args"},"Complex Case (some custom script args)"),(0,r.kt)("p",null,"In the more complex case, you'll still need to provide some custom dataclass for Hydra to identify the args you want to pass to your script. For this you'll create a config just for your args, and pass that along to ",(0,r.kt)("inlineCode",{parentName:"p"},"@task_script")," instead. We rely on ",(0,r.kt)("inlineCode",{parentName:"p"},"build_default_task_config")," to create the base class for your ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskConfig"),", using the same ",(0,r.kt)("inlineCode",{parentName:"p"},"default_config_file")," that you used to pass in as ",(0,r.kt)("inlineCode",{parentName:"p"},'"conf"'),". You can then pass your custom ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskConfig")," as the ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"@task_script"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport hydra\nfrom mephisto.operations.operator import Operator\nfrom omegaconf import DictConfig\nfrom dataclasses import dataclass, field\nfrom typing import List, Any\n\nTASK_DIRECTORY = os.path.dirname(os.path.abspath(__file__))\nCORRECT_ANSWER = "apple"\n\ndefaults = ["_self_", {"conf": "onboarding_example"}]\n\nfrom mephisto.operations.hydra_config import RunScriptConfig, register_script_config\n\n@dataclass\nclass TestScriptConfig(RunScriptConfig):\n    defaults: List[Any] = field(default_factory=lambda: defaults)\n    task_dir: str = TASK_DIRECTORY\n    correct_answer: str = CORRECT_ANSWER\n\nregister_script_config(name="scriptconfig", module=TestScriptConfig)\n\n@hydra.main(config_path="hydra_configs", config_name="scriptconfig")\ndef main(cfg: DictConfig) -> None:\n\n\n# after\nfrom mephisto.operations.operator import Operator\nfrom mephisto.tools.scripts import task_script\nfrom mephisto.operations.hydra_config import build_default_task_config\nfrom omegaconf import DictConfig\nfrom dataclasses import dataclass\n\nCORRECT_ANSWER = "apple"\n\n@dataclass\nclass OnboardingConfig(build_default_task_config(\'onboarding_example\')): # type: ignore\n    correct_answer: str = CORRECT_ANSWER\n\n\n@task_script(config=OnboardingConfig)\ndef main(operator: Operator, cfg: DictConfig) -> None:\n')),(0,r.kt)("p",null,"In this case we were able to retain the custom ",(0,r.kt)("inlineCode",{parentName:"p"},"correct_answer")," behavior while still cutting down on the overall boilerplate."),(0,r.kt)("h2",{id:"updating--main-script-contents"},"Updating  main script contents"),(0,r.kt)("h3",{id:"processing-your-config-or-initializing-a-mephistodb-or-operator"},"Processing your config, or initializing a MephistoDB or Operator"),(0,r.kt)("p",null,"Now that we supply your script with an ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),", you no longer need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"load_db_and_process_config")," or any other config processing script helper. We pre-process the ",(0,r.kt)("inlineCode",{parentName:"p"},"cfg")," that we provide you to ensure it is valid. You can also retrieve the ",(0,r.kt)("inlineCode",{parentName:"p"},"MephistoDB")," for your task directly from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"operator.db"),", so no need to initialize that directly either."),(0,r.kt)("h3",{id:"launching-a-run-from-your-operator"},"Launching a run from your operator"),(0,r.kt)("p",null,"This change is really simple, just replace any callsites to ",(0,r.kt)("inlineCode",{parentName:"p"},"validate_and_run_config")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"launch_task_run"),". The function signature is the same."))}c.isMDXComponent=!0}}]);