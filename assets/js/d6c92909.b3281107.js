"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[8487],{5110:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(9703);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=p(n),h=o,m=f["".concat(c,".").concat(h)]||f[h]||l[h]||i;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4932:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7086),o=(n(9703),n(5110));const i={sidebar_position:1},a="Use the same configs across tasks",s={unversionedId:"guides/how_to_use/efficiency_organization/reusing_configs",id:"guides/how_to_use/efficiency_organization/reusing_configs",isDocsHomePage:!1,title:"Use the same configs across tasks",description:"As you begin launching many Mephisto tasks, you may find that there are some specific argument options that you frequently use across multiple tasks. Mephisto provides a way to reuse these types of configurations with profiles.",source:"@site/docs/guides/how_to_use/efficiency_organization/reusing_configs.md",sourceDirName:"guides/how_to_use/efficiency_organization",slug:"/guides/how_to_use/efficiency_organization/reusing_configs",permalink:"/docs/guides/how_to_use/efficiency_organization/reusing_configs",editUrl:"https://github.com/facebookresearch/Mephisto/tree/main/docs/web/docs/guides/how_to_use/efficiency_organization/reusing_configs.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"guides",previous:{title:"Other methods for quality control",permalink:"/docs/guides/how_to_use/worker_quality/other_methods"},next:{title:"View task health and status with Mephisto Metrics",permalink:"/docs/guides/how_to_use/efficiency_organization/metrics_dashboarding"}},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"use-the-same-configs-across-tasks"},"Use the same configs across tasks"),(0,o.kt)("p",null,"As you begin launching many Mephisto tasks, you may find that there are some specific argument options that you frequently use ",(0,o.kt)("em",{parentName:"p"},"across")," multiple tasks. Mephisto provides a way to reuse these types of configurations with ",(0,o.kt)("inlineCode",{parentName:"p"},"profile"),"s."),(0,o.kt)("p",null,"Setting up profiles is pretty easy, and makes it so that you don't have to be writing architect and crowdprovider args on every launch:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python run_task.py mephisto/architect=heroku mephisto/provider=mturk_sandbox mephisto.provider.requester_name=MY_REQUESTER\n")),(0,o.kt)("p",null,"Instead you can move these common configurations into a file in your ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.mephisto/hydra_configs/profile")," dir. "),(0,o.kt)("p",null,"With this, you can do something like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# profile/local_testing.yaml\n# @package _global_\nmephisto:\n  architect:\n    _architect_type: local\n    port: 1234\n  provider:\n    _provider_type: mock\n\n# profile/internal_sharing.yaml\n# @package _global_\nmephisto:\n  architect:\n    _architect_type: heroku\n    use_hobby: false\n  provider:\n    _provider_type: mock\n\n# profile/prelaunch_test.yaml\n# @package _global_\nmephisto:\n  architect:\n    _architect_type: heroku\n    use_hobby: false\n  provider:\n    _provider_type: mturk_sandbox\n    requester_name: MY_REQUESTER_sandbox\n\n# profile/live_launch.yaml\n# @package _global_\nmephisto:\n  architect:\n    _architect_type: heroku\n    use_hobby: true\n  provider:\n    _provider_type: mturk\n    requester_name: MY_REQUESTER\n")),(0,o.kt)("p",null,"Then augmenting your launch configs is as easy as doing:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python run_task.py +profile=local_testing\n...\npython run_task.py +profile=live_launch\n")),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"profile")," can be an effective way to simplify the configuration for your most common workflows."))}u.isMDXComponent=!0}}]);